.MODEL SMALL
.STACK
.DATA

MSG DB "<<<WELLCOME USER>>>$"

MSG1 DB "STRING COPY","    ","<A>$"
MSG2 DB "STRING COMPARE"," " ,"<B>$" 
MSG3 DB "STRING SEARCH","  ","<C>$"
MSG4 DB "STRING1: $"
MSG5 DB "STRING2: $"
MSG6 DB "WORK WITH THE SAME STRINGS <Y>/<N>: $"

MSG7 DB "OTHER CHRACHTERS$"
MSG8 DB "NUMBERS$"
MSG9 DB "CAPITAL LETTERS$"
MSG10 DB "SMALL LETTERS$"
MSG11 DB "TOTAL CHARACTERS$"

MSG12 DB  "<STRINGS ARE EQUAL!>$"
MSG13 DB  "STRINGS NOT EQUAL$"

MSG14 DB  "PRESS ANY KEY...$"
MSG15 DB "SEARCH: $"

MSG16 DB "<MATCH FOUND!>$"
MSG17 DB "NO MATCH FOUND$"
MSG18 DB  "STARTING AT INDEX: $"
MSG19 DB  "COPY STRING1 TO STRING2 OR REVERSE <1>/<2>: $"
MSG20 DB  "RESTORE STRINGS <Y>/<N>: $"

TESTCHAR DB ?

DISP DB "<<$",">>$"
INPUT DB "SELECT: $"
CHAR DB ?

PAR_LST1 LABEL BYTE
MAX_L1   DB    20 
ACT_L1   DB     ?
STRING1  DB     20 DUP(" ")

PAR_LST2 LABEL BYTE
MAX_L2    DB    20 
ACT_L2    DB    ?
STRING2   DB    20 DUP(" ")

TEMPSTR DB 20 DUP(" ")
COUNTER DB 4 DUP (0)
COUNTER1 DB 4 DUP (0)

.CODE

MAIN PROC FAR

MOV AX,@DATA
MOV DS,AX
MOV ES,AX

T0:
CALL MAINSCREEN
MOV CHAR,AL

XOR AL,41H
JZ T1
MOV AL,CHAR
XOR AL,42H
JZ T2
MOV AL,CHAR
XOR AL,43H
JZ T3
JMP T0

T1:
CALL STRINGCOPY
JMP T0
T2:
CALL STRINGCOMPARE
JMP T0
T3:
CALL STRINGSEARCH
JMP T0

MAIN ENDP
     
MAINSCREEN PROC

MOV AX,0600H
MOV BH,0AH
MOV CX,0H
MOV DX,184FH
INT 10H

MOV AH,02H
MOV BH,00
MOV DH,3
MOV DL,28
INT 10H

MOV AH,09H
LEA DX,MSG
INT 21H

MOV AH,02H
MOV BH,00
MOV DH,10
MOV DL,29
INT 10H

MOV AH,09
LEA DX,MSG1
INT 21H

MOV AH,02H
MOV DH,12
MOV DL,29
INT 10H

MOV AH,09
LEA DX,MSG2
INT 21H

MOV AH,02H
MOV DH,14
MOV DL,29
INT 10H

MOV AH,09
LEA DX,MSG3
INT 21H

MOV AH,02H
MOV DH,20
MOV DL,33
INT 10H

MOV AH,09
LEA DX,INPUT
INT 21H

MOV AH,01
INT 21H

RET

MAINSCREEN ENDP

STRINGCOMPARE PROC

MOV AX,0600H
MOV BH,0AH
MOV CX,0H
MOV DX,184FH
INT 10H

MOV AH,02H
MOV BH,00
MOV DH,3
MOV DL,28
INT 10H

MOV AH,09
LEA DX,DISP
INT 21H

MOV AH,40H
MOV BX,01
MOV CX,14
LEA DX,MSG2
INT 21H

MOV AH,09
LEA DX,DISP[3]
INT 21H

MOV AH,02H
MOV DH,13
MOV DL,21
INT 10H

CALL ACCEPTSTRING
 
CMP AH,01 ; CHECK WHAT ACCEPTSTRING DID **IT SENDS VALUE ON AH** 
JZ C3    ;THERE IS STRING    
JS C1    ;NEW STRING ACCEPTED

C3:         
MOV AH,09
LEA DX,MSG6
INT 21H

MOV AH,03H
MOV BH,00
INT 10H

W1:
MOV AH,02H
MOV BH,00
INT 10H

MOV AH,01
INT 21H

CMP AL,59H  ;CAPITAL y; WORK WITH THE SAME STRINGS
JZ C1
CMP AL,4EH  ;CPITAL N ; NO REPLACE STRINGS
JZ C2
JNZ W1

C2:
MOV ACT_L1,0
MOV ACT_L1,0

MOV CX,0
MOV CX,20
MOV SI,0

Z10:
MOV STRING2[SI]," "
MOV STRING1[SI]," "
INC SI
LOOP Z10

MOV MAX_L1,20
MOV MAX_L2,20

CALL ACCEPTSTRING

C1:
MOV CX,0
MOV CX,4
MOV SI,0

Z9:
MOV COUNTER[SI],0
MOV COUNTER1[SI],0
INC SI
LOOP Z9

MOV CX,0
MOV CL,ACT_L1
LEA SI,STRING1
LEA DI,TEMPSTR
REP MOVSB

MOV CL,ACT_L1
MOV SI,0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
C4:                           ; COUNT CHARACTERS FOR STRING1
MOV AL,TEMPSTR[SI]
MOV CHAR,AL
CMP CHAR,30H
JS A20
JZ A21
CMP  CHAR,39H
JS A21
JZ A21
CMP CHAR,41H
JS A20
JZ A22
CMP CHAR,5AH
JS A22
JZ A22
CMP CHAR,61H
JS A20
JZ A23
CMP CHAR,7AH
JS A23
JZ A23

A20:
INC COUNTER[0]
JMP A24
A21:
INC COUNTER[1]
JMP A24
A22:
INC COUNTER[2]
JMP A24
A23:
INC COUNTER[3]
JMP A24
A24: 
INC SI
LOOP C4

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MOV CX,0                   ; COUNT CHARACTERS FOR STRING2

MOV CL,ACT_L2
LEA SI,STRING2
LEA DI,TEMPSTR
REP MOVSB

MOV CL,ACT_L2
MOV SI,0

C5:
MOV AL,TEMPSTR[SI]           
MOV CHAR,AL
CMP CHAR,30H
JS A30
JZ A31
CMP  CHAR,39H
JS A31
JZ A31
CMP CHAR,41H
JS A30
JZ A32
CMP CHAR,5AH
JS A32
JZ A32
CMP CHAR,61H
JS A30
JZ A33
CMP CHAR,7AH
JS A33
JZ A33

A30:
INC COUNTER1[0]
JMP A34
A31:
INC COUNTER1[1]
JMP A34
A32:
INC COUNTER1[2]
JMP A34
A33:
INC COUNTER1[3]
JMP A34
A34: 
INC SI
LOOP C5

CALL DISPLAYCONTENTS1
CALL DISPLAYCONTENTS2

RET
STRINGCOMPARE ENDP

STRINGCOPY PROC 

MOV AX,0600H
MOV BH,0AH
MOV CX,0H
MOV DX,184FH
INT 10H

MOV AH,02H
MOV BH,00
MOV DH,3
MOV DL,28
INT 10H

MOV AH,09
LEA DX,DISP
INT 21H

MOV AH,40H
MOV BX,01
MOV CX,11
LEA DX,MSG1
INT 21H

MOV AH,09
LEA DX,DISP[3]
INT 21H

MOV AH,02H
MOV DH,13
MOV DL,21
INT 10H

MOV AX,0600H
MOV BH,0AH
MOV CX,0400H
MOV DX,184FH
INT 10H

CALL ACCEPTSTRING
 
CMP AH,01 ; CHECK WHAT ACCEPTSTRING DID **IT SENDS VALUE ON AH** 
JZ CO3    ;THERE IS STRING    
JS CO1    ;NEW STRING ACCEPTED

CO3:         
MOV AH,09
LEA DX,MSG6
INT 21H

MOV AH,03H
MOV BH,00
INT 10H

U1:
MOV AH,02H
MOV BH,00
INT 10H

MOV AH,01
INT 21H

CMP AL,59H  ;CAPITAL y; WORK WITH THE SAME STRING

JZ CO1
CMP AL,4EH  ;CPITAL N ; NO REPLACE STRINGS
JZ CO2
JNZ U1


CO2:
MOV ACT_L1,0
MOV ACT_L1,0

MOV CX,0
MOV CX,20
MOV SI,0

ZO10:
MOV STRING2[SI]," "
MOV STRING1[SI]," "
INC SI
LOOP ZO10

MOV MAX_L1,20
MOV MAX_L2,20

CALL ACCEPTSTRING

CO1:

MOV AX,0600H
MOV BH,0AH
MOV CX,0400H
MOV DX,184FH
INT 10H

MOV AH,02H
MOV BH,00
MOV DH,8
MOV DL,28
INT 10H

MOV AH,09
LEA DX,MSG4
INT 21H

MOV AH,09
LEA DX,STRING1
INT 21H

MOV AH,02H
MOV BH,00
MOV DH,10
MOV DL,28
INT 10H

MOV AH,09
LEA DX,MSG5
INT 21H

MOV AH,09
LEA DX,STRING2
INT 21H

MOV AH,02H
MOV BH,00
MOV DH,13
MOV DL,16
INT 10H

MOV AH,09
LEA DX,MSG19
INT 21H

MOV AX,0600H
MOV BH,0AH
MOV CX,0E00H
MOV DX,184FH
INT 10H

MOV AH,03H ;GET CURSOR POSITION ROW = DH COLUMN = DL
MOV BH,00
INT 10H

V1:
MOV AH,02H
MOV BH,00
INT 10H

MOV AH,01
INT 21H

CMP AL,31H  ;COPY STRING1 TO TWO
JZ CO4
CMP AL,32H  ;COPY STRING2 TO ONE
JZ CO5
JNZ V1

CO4:
MOV CX,0
MOV BX,0
MOV BL,ACT_L2

CLD
MOV CL,BL
LEA SI,STRING2
LEA DI,TEMPSTR
REP MOVSB

ADD BL,1
MOV TEMPSTR[BX],"$"

MOV SI,0
MOV CL,20

MC0:
MOV STRING2[SI]," "
INC SI
LOOP MC0

MOV CX,0
MOV BL,ACT_L1

CLD
MOV CL,BL
LEA SI,STRING1
LEA DI,STRING2
REP MOVSB

ADD BL,1
MOV STRING2[BX],"$"

MOV AH,02H
MOV BH,00
MOV DH,16
MOV DL,28
INT 10H

MOV AH,09
LEA DX,MSG4
INT 21H

MOV AH,09
LEA DX,STRING1
INT 21H

MOV AH,02H
MOV BH,00
MOV DH,18
MOV DL,28
INT 10H

MOV AH,09
LEA DX,MSG5
INT 21H

MOV AH,09
LEA DX,STRING2
INT 21H

MOV TESTCHAR,1
JMP CO6

CO5:
MOV CX,0
MOV BX,0
MOV BL,ACT_L1

CLD
MOV CL,BL
LEA SI,STRING1
LEA DI,TEMPSTR
REP MOVSB

ADD BL,1
MOV TEMPSTR[BX],"$"

MOV SI,0
MOV CL,20

MC1:
MOV STRING1[SI]," "
INC SI
LOOP MC1

MOV CX,0
MOV BX,0
MOV BL,ACT_L2

CLD
MOV CL,BL
LEA SI,STRING2
LEA DI,STRING1
REP MOVSB

ADD BL,1
MOV STRING1[BX],"$"

MOV AH,02H
MOV BH,00
MOV DH,16
MOV DL,28
INT 10H

MOV AH,09
LEA DX,MSG4
INT 21H

MOV AH,09
LEA DX,STRING1
INT 21H

MOV AH,02H
MOV BH,00
MOV DH,18
MOV DL,28
INT 10H

MOV AH,09
LEA DX,MSG5
INT 21H

MOV AH,09
LEA DX,STRING2
INT 21H

MOV TESTCHAR,2

CO6:
MOV AH,02H
MOV BH,00
MOV DH,21
MOV DL,24
INT 10H

MOV AH,09
LEA DX,MSG20
INT 21H

MOV AH,03H
MOV BH,00
INT 10H

L1:
MOV AH,02H
MOV BH,00
INT 10H

MOV AH,01
INT 21H

CMP AL,59H  ;CAPITAL y; RESTORE STRINGS
JZ CO7
CMP AL,4EH  ;CPITAL N ;DON't RESTORE STRINGS
JZ CE0
JNZ L1


CO7:
CMP TESTCHAR,2
JS R1

MOV CX,0
MOV SI,0
MOV CL,20

MC2:
MOV STRING1[SI]," "
INC SI
LOOP MC2

MOV CX,0
MOV BX,0
MOV BL,ACT_L1

CLD
MOV CL,BL
LEA SI,TEMPSTR
LEA DI,STRING1
REP MOVSB

ADD BL,1
MOV STRING1[BX],"$"
JMP CE0

R1:
MOV CX,0
MOV CL,20
MC3:
MOV STRING2[SI]," "
INC SI
LOOP MC3

MOV CX,0
MOV BX,0
MOV BL,ACT_L2

CLD
MOV CL,BL
LEA SI,TEMPSTR
LEA DI,STRING2
REP MOVSB

ADD BL,1
MOV STRING2[BX],"$"

CE0:
MOV TESTCHAR,0
RET

STRINGCOPY ENDP

STRINGSEARCH PROC  ;'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

MOV AX,0600H
MOV BH,0AH
MOV CX,0H
MOV DX,184FH
INT 10H

MOV AH,02H
MOV BH,00
MOV DH,3
MOV DL,28
INT 10H

MOV AH,09
LEA DX,DISP
INT 21H

MOV AH,40H
MOV BX,01
MOV CX,13
LEA DX,MSG3
INT 21H

MOV AH,09
LEA DX,DISP[3]
INT 21H

MOV AH,02H
MOV BH,00
MOV DH,13
MOV DL,21
INT 10H

MOV TESTCHAR,1

CALL ACCEPTSTRING
 
CMP AH,01  ; CHECK WHAT ACCEPTSTRING DID **IT SENDS VALUE ON AH** 
JZ S3      ;THERE IS STRING    
JS S1     ;NEW STRING ACCEPTED

S3:         
MOV AH,09
LEA DX,MSG6
INT 21H

MOV AH,03H
MOV BH,00
INT 10H

X1:
MOV AH,02H
MOV BH,00
INT 10H

MOV AH,01
INT 21H

CMP AL,59H  ;CAPITAL y; WORK WITH THE SAME STRINGS
JZ S1
CMP AL,4EH  ;CPITAL N ; NO REPLACE STRINGS
JZ S2
JNZ X1

S2:
MOV ACT_L1,0
MOV ACT_L1,0

MOV CX,0
MOV CX,20
MOV SI,0

Y10:
MOV STRING2[SI]," "
MOV STRING1[SI]," "
INC SI
LOOP Y10

MOV MAX_L1,20
MOV MAX_L2,20

CALL ACCEPTSTRING

S1:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;$$$$%%%%%%%%%%%%%%%%%$$$%%@@@@@@@@@@@@@@@@@@@
MOV AX,0600H
MOV BH,0AH
MOV CX,0400H
MOV DX,184FH
INT 10H


MOV AH,02H
MOV BH,00
MOV DH,10
MOV DL,29
INT 10H

MOV AH,09
LEA DX,MSG15
INT 21H

MOV AH,09
LEA DX,STRING1
INT 21H

MOV AH,02H
MOV BH,00
MOV DH,13
MOV DL,29
INT 10H

MOV AH,09
LEA DX,MSG5
INT 21H

MOV AH,09
LEA DX,STRING2
INT 21H

MOV CX,0
MOV DX,0
MOV SI,0
MOV DI,0
MOV CL,ACT_L1

SE:
MOV AX,0
MOV AX,DI
CMP ACT_L2,AL
JS SE3

MOV AL,STRING1[SI]
XOR AL,STRING2[DI]
JZ SE1
JNZ SE2


SE1:
INC SI
INC DI
INC DL
LOOP SE
JMP SE3

SE2:
MOV AX,0
MOV AX,DI
CMP AL,ACT_L2

MOV SI,0
MOV DX,0
MOV CL,ACT_L1

MOV AL,STRING1[SI]
XOR AL,STRING2[DI]
JZ SE1     ;TO CHECK IF TH THE DI INDEX IS EQUAL TO THE FIRST ONE

INC DI
MOV DX,0
MOV CL,ACT_L1
JMP SE


SE3:
MOV BL,DL
CMP BL,ACT_L1
JZ SE4

MOV AH,02H
MOV BH,00
MOV DH,17
MOV DL,29
INT 10H

MOV AH,09
LEA DX,MSG17
INT 21H

JMP P1

SE4:
MOV AH,02H
MOV BH,00
MOV DH,17
MOV DL,29
INT 10H

MOV AH,09
LEA DX,MSG16
INT 21H

MOV AH,02H
MOV BH,00
MOV DH,20
MOV DL,29
INT 10H

MOV AH,09
LEA DX,MSG18
INT 21H

MOV AX,DI
SUB AL,ACT_L1

CALL BCDTOASCII

P1:
MOV AH,02H
MOV BH,00
MOV DH,23
MOV DL,29
INT 10H

MOV AH,09
LEA DX,MSG14
INT 21H

MOV AH,01
INT 21H

MOV TESTCHAR,0
RET

STRINGSEARCH ENDP
     
ACCEPTSTRING PROC

MOV AX,0600H
MOV BH,0AH
MOV CX,0C10H
MOV DX,184FH
INT 10H

CMP ACT_L1,0
JZ T9

XOR AH,AH     ;IT ACT_L1 IS NOT EMPTY... THERE IS STRING, PUT 01 IN AH FOR STRINGCOMPARE TO TEST
MOV AH,01     
             ; AH 01 = THERE IS STRING
RET

T9:

MOV ACT_L1,0
MOV ACT_L2,0

MOV AH,02H
MOV BH,00
MOV DH,10
MOV DL,29
INT 10H

CMP TESTCHAR,1
JNZ FS0

MOV AH,09
LEA DX,MSG15
INT 21H
JMP FS1

FS0:
MOV AH,09
LEA DX,MSG4
INT 21H

FS1:
MOV AH,0AH
LEA DX,PAR_LST1
INT 21H

MOV AH,02H
MOV BH,00
MOV DH,13
MOV DL,29
INT 10H

MOV AH,09
LEA DX,MSG5
INT 21H

MOV AH,0AH
LEA DX,PAR_LST2
INT 21H

CMP ACT_L1,0          ;NO STRING ENTERED! GO BACK TO T9
JZ T9
CMP ACT_L2,0
JZ T9

MOV BL,ACT_L1
MOV STRING1[BX+1],"$"

MOV BL,ACT_L2
MOV STRING2[BX+1],"$"

MOV AX,0600H
MOV BH,0AH
MOV CX,0400H
MOV DX,184FH
INT 10H

MOV AH,00    ;PUT 0 ON AH FOR STRINGCOMPARE TO TEST IT 
             ; AH 0 = NEW STRING ACCEPTED*
RET

ACCEPTSTRING ENDP

DISPLAYCONTENTS1 PROC

MOV AX,0600H
MOV BH,0AH
MOV CX,0400H
MOV DX,184FH
INT 10H

MOV AH,02H
MOV BH,00
MOV DH,9
MOV DL,9
INT 10H

MOV AH,09
LEA DX,MSG4
INT 21H

MOV CX,0

MOV AH,40H
MOV BX,01
MOV CL,ACT_L1
LEA DX,STRING1
INT 21H

MOV AH,02H
MOV BH,00
MOV DH,11
MOV DL,9
INT 10H
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MOV AX,0
MOV AL,COUNTER[0]

CALL BCDTOASCII

MOV DL," "
INT 21H

MOV AH,09
LEA DX,MSG7
INT 21H

;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MOV AH,02H
MOV BH,00
MOV DH,13
MOV DL,9
INT 10H

MOV AX,0
MOV AL,COUNTER[1]

CALL BCDTOASCII

MOV DL," "
INT 21H

MOV AH,09
LEA DX,MSG8
INT 21H

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MOV AH,02H
MOV BH,00
MOV DH,15
MOV DL,9
INT 10H

MOV AX,0
MOV AL,COUNTER[2]

CALL BCDTOASCII

MOV DL," "
INT 21H

MOV AH,09
LEA DX,MSG9
INT 21H

;;;;;;;;;;;;;;;;;
MOV AH,02H
MOV BH,00
MOV DH,17
MOV DL,9
INT 10H

MOV AX,0
MOV AL,COUNTER[3]

CALL BCDTOASCII

MOV DL," "
INT 21H

MOV AH,09
LEA DX,MSG10
INT 21H

;;;;;;;;;;;;;;;;;;;;;;;;
MOV AH,02H
MOV BH,00
MOV DH,19
MOV DL,9
INT 10H

MOV AX,0
MOV AL,ACT_L1

CALL BCDTOASCII

MOV DL," "
INT 21H

MOV AH,09
LEA DX,MSG11
INT 21H

RET
DISPLAYCONTENTS1 ENDP

DISPLAYCONTENTS2 PROC

MOV AX,0600H
MOV BH,0AH
MOV CX,0A1DH
MOV DX,184FH
INT 10H

MOV AH,02H
MOV BH,00
MOV DH,9
MOV DL,50
INT 10H

MOV AH,09
LEA DX,MSG5
INT 21H

MOV CX,0

MOV AH,40H
MOV BX,01
MOV CL,ACT_L2
LEA DX,STRING2
INT 21H

MOV AH,02H
MOV BH,00
MOV DH,11
MOV DL,50
INT 10H
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MOV AX,0
MOV AL,COUNTER1[0]

CALL BCDTOASCII

MOV DL," "
INT 21H

MOV AH,09
LEA DX,MSG7
INT 21H

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MOV AH,02H
MOV BH,00
MOV DH,13
MOV DL,50
INT 10H

MOV AX,0
MOV AL,COUNTER1[1]

CALL BCDTOASCII

MOV DL," "
INT 21H

MOV AH,09
LEA DX,MSG8
INT 21H

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MOV AH,02H
MOV BH,00
MOV DH,15
MOV DL,50
INT 10H

MOV AX,0
MOV AL,COUNTER1[2]

CALL BCDTOASCII

MOV DL," "
INT 21H

MOV AH,09
LEA DX,MSG9
INT 21H

;;;;;;;;;;;;;;;;;
MOV AH,02H
MOV BH,00
MOV DH,17
MOV DL,50
INT 10H

MOV AX,0
MOV AL,COUNTER1[3]

CALL BCDTOASCII

MOV DL," "
INT 21H

MOV AH,09
LEA DX,MSG10
INT 21H

;;;;;;;;;;;;;;;;;;;;;;;;
MOV AH,02H
MOV BH,00
MOV DH,19
MOV DL,50
INT 10H

MOV AX,0
MOV AL,ACT_L2

CALL BCDTOASCII

MOV DL," "
INT 21H

MOV AH,09
LEA DX,MSG11
INT 21H
;;;;;;;;;;;;;;;;;;;;;;;;;

MOV AH,02H
MOV BH,00
MOV DH,21
MOV DL,28
INT 10H

MOV AX,0
MOV AL,ACT_L1

CMP AL,ACT_L2
JZ E1

MOV AH,09
LEA DX,MSG13
INT 21H
JMP CE

E1:
MOV CX,0
MOV CL,ACT_L1
LEA SI,STRING1
LEA DI,STRING2
REPE CMPSB
JZ E2

MOV AH,09
LEA DX,MSG13
INT 21H
JMP CE

E2:
MOV AH,09
LEA DX,MSG12
INT 21H

CE:
MOV AH,02H
MOV BH,00
MOV DH,24
MOV DL,30
INT 10H

MOV AH,09
LEA DX,MSG14
INT 21H

MOV AH,01
INT 21H

RET
DISPLAYCONTENTS2 ENDP

BCDTOASCII PROC

MOV CL,10H

CMP AL,10H
JS BA1

ADD AL,6
DIV CL

ADD AH,30H
ADD AL,30H

MOV BH,AH
MOV BL,AL

MOV AH,02
MOV DL,BL
INT 21H

MOV DL,BH
INT 21H
JMP BA2


BA1:
AAA
ADD AH,30H
ADD AL,30H

MOV BH,AH
MOV BL,AL

MOV AH,02
MOV DL,BH
INT 21H

MOV DL,BL
INT 21H

BA2:
RET

BCDTOASCII ENDP    

CLEARSCREEN PROC          

MOV AX,0600H
MOV BH,0AH
MOV CX,0400H
MOV DX,184FH
INT 10H

CLEARSCREEN ENDP

 END MAIN
